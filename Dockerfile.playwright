# syntax=docker/dockerfile:1.4

#############################
# ðŸ§± Builder
#############################
FROM mcr.microsoft.com/playwright:v1.55.0-noble AS builder
USER root
WORKDIR /app

# Python runtime + poetry from apt (avoids PEP 668)
RUN apt-get update && apt-get install -y --no-install-recommends \
      python3 python3-venv python3-pip python3-poetry curl git ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Use a project venv so we never touch system site-packages
ENV POETRY_VIRTUALENVS_CREATE=true \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app \
    PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD=1

COPY pyproject.toml poetry.lock* README.md ./
RUN --mount=type=cache,target=/root/.cache/pip \
    --mount=type=cache,target=/root/.cache/pypoetry \
    poetry install --only main,playwright,mcp --no-interaction --no-ansi


#############################
# ðŸš€ Runtime
#############################
FROM mcr.microsoft.com/playwright:v1.55.0-noble
USER root
WORKDIR /app

# Just minimal Python runtime
RUN apt-get update && apt-get install -y --no-install-recommends \
      python3 python3-venv python3-pip curl ca-certificates \
    && rm -rf /var/lib/apt/lists/*

ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app 

# Copy app + its venv from builder
COPY --from=builder /app /app
# Use the project venv
ENV VIRTUAL_ENV=/app/.venv \
    PATH="/app/.venv/bin:${PATH}"


# entrypoint
RUN chmod +x /usr/local/bin/start.sh \
 && mkdir -p /home/pwuser/screenshots /app/files/downloads /app/screenshots \
 && chown -R pwuser:pwuser /home/pwuser /app

USER pwuser
CMD ["/usr/local/bin/start.sh"]
