services:

  postgres-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "postgres"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_postgres_mcp
    depends_on:
      - db
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - DB_CONNECTION_STRING=postgresql://app:app@ohcm_postgres_db:5432/app
      - PYTHONPATH=/app
    ports:
      - "20018:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers

  db:
    image: postgres:17
    container_name: ohcm_postgres_db
    environment:
      POSTGRES_DB: app
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
    ports: 
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app"]
      interval: 5s
      timeout: 5s
      retries: 10

  migrator:
    build:
      context: .
      dockerfile: Dockerfile.goose
    container_name: ohcm_migrator
    depends_on:
      db:
        condition: service_healthy
    environment:
      GOOSE_DRIVER: postgres
      GOOSE_DBSTRING: postgres://app:app@db:5432/app?sslmode=disable
    volumes:
      - ./db/migrations:/app/migrations   # your .sql files
    working_dir: /app
    entrypoint: ["goose"]                    # default entrypoint; pass cmds via `command:`
    # Example default: run all up migrations
    command: ["-dir", "/app/migrations", "up"]

volumes:
  db_data:
