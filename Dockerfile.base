# syntax=docker/dockerfile:1.4

#############################
# ðŸ›  Builder Stage
#############################
FROM python:3.12-alpine AS builder

WORKDIR /app

# Accept build argument for Poetry groups
ARG POETRY_GROUPS="main"
ARG IS_PROD="true"
ARG CMD_MODULE=""
ARG CMD_ARGS=""

# Install build-time dependencies
RUN apk add --no-cache \
    build-base libffi-dev openssl-dev \
    curl wget git

# Install Poetry
RUN pip install --no-cache-dir poetry

# Prevent Poetry from creating venvs
ENV POETRY_VIRTUALENVS_CREATE=false \
    PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# Copy dependency definitions
COPY pyproject.toml poetry.lock README.md ./

# Install dependencies based on environment
RUN poetry install --only main,${POETRY_GROUPS},debug --no-root --no-interaction --no-ansi;


#############################
# ðŸš€ Runtime Stage
#############################
FROM python:3.12-alpine

WORKDIR /app

# Install only runtime system libraries
RUN apk add --no-cache \
    libffi \
    openssl

ENV PYTHONUNBUFFERED=1 \
    PYTHONPATH=/app

# Copy installed Python packages and entrypoints
COPY --from=builder /usr/local/lib/python3.12 /usr/local/lib/python3.12
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy app source
# COPY ./src/mcp_servers /app/mcp_servers

# (Optional) create runtime dirs
RUN mkdir -p /app/files/downloads /app/screenshots

# Use the CMD_MODULE and CMD_ARGS build arguments, wrapping with debugpy when IS_PROD is false
CMD if [ "$IS_PROD" = "true" ]; then \
        python -m ${CMD_MODULE} ${CMD_ARGS}; \
    else \
        python -Xfrozen_modules=off -m debugpy --listen 0.0.0.0:5678 --wait-for-client -- python -m ${CMD_MODULE} ${CMD_ARGS}; \
    fi
