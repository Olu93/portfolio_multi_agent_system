version: '3.8'

services:
  mcp-inspector:
    build:
      context: .
      dockerfile: Dockerfile.npx
      args:
        NPX_PACKAGE: "@modelcontextprotocol/inspector"  
    container_name: ohcm_mcp_inspector
    environment:
      - HOST=0.0.0.0
      - DANGEROUSLY_OMIT_AUTH=true 
      # - MCP_PROXY_AUTH_TOKEN=${MCP_PROXY_AUTH_TOKEN} # TODO: Use this instead. FOLLOW-UP: Doesn't work.
      - MCP_PROXY_FULL_ADDRESS=http://localhost:6277
      - ALLOWED_ORIGINS=http://localhost:6274,http://localhost:8000,http://localhost:9000
      - MCP_AUTO_OPEN_ENABLED=false
    ports:
      - "9000:6274"
      - "6277:6277" # Mandatory for inspector to work
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers
    command: npx @modelcontextprotocol/inspector
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # mcp-jam-inspector:
  #   image: mcpjam/mcp-inspector:latest
  #   container_name: mcp-jam-inspector

  #   ports:
  #     - "9000:3001"
  #   volumes:
  #     - ./lingua_scraper:/app/lingua_scraper
  #     - ./backend/configs/sensitive/config.inspector.json:/app/config.inspector.json
  #   networks:
  #     - ${NETWORK_NAME}

  calendar-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "cal"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_calendar_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - PYTHONPATH=/app
      - CALDAV_URL=${CALDAV_URL}
      - CALDAV_USER=${CALDAV_USER}
      - CALDAV_PASSWORD=${CALDAV_PASSWORD}
    ports:
      - "20011:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers

  yfinance-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "yahoo_finance"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_yfinance_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - PYTHONPATH=/app
    ports:
      - "20012:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers
    
  smtp-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "smtp"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_smtp_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      # - SMTP_USE_TLS=${SMTP_USE_TLS}
      # - SMTP_USE_SSL=${SMTP_USE_SSL}
      # - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
    ports:
      - "20013:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers

  serper-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "serper"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_serper_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - SERPER_API_KEY=${SERPER_API_KEY}
      - PYTHONPATH=/app
    ports:
      - "20014:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers
    # command: python serper-official.py

  duckduckgo-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "duckduckgo"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_duckduckgo_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - PYTHONPATH=/app
    ports:
      - "20015:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
    working_dir: /app/mcp_servers





  playwright-mcp:
    build:
      context: .
      dockerfile: Dockerfile.playwright
    container_name: ohcm_playwright_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000      
      - PLAYWRIGHT_SERVER_PORT=3001
      - APP_CMD=python playwright_extension.py
    ports:
      - "20016:5678" 
    volumes:
      - ./files/screenshots:/home/pwuser/screenshots
      - ./backend/src/mcp_servers:/app/mcp_servers
      - ./docker/scripts/start.sh:/usr/local/bin/start.sh:ro
    user: pwuser
    working_dir: /app/mcp_servers
    init: true
    ipc: host
    security_opt:
      - seccomp=docker/configs/seccomp_profile.json


  file-storage-mcp:
    build:
      context: .
      dockerfile: Dockerfile.base
      args:
        POETRY_GROUPS: "mcp"
        IS_PROD: ${IS_PROD}
        CMD_MODULE: "file_storage"
        CMD_ARGS: ""
        DEBUG_PY_ARGS: ""
    container_name: ohcm_file_storage_mcp
    environment:
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8000
      - DEFAULT_STORAGE_PATH=/app/files/downloads
      - PYTHONPATH=/app
    ports:
      - "20017:5678"    # debugpy port for VS Code debugging
    volumes:
      - ./backend/src/mcp_servers:/app/mcp_servers
      - ./files:/app/files
    working_dir: /app/mcp_servers



  # kafka-mcp:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.base
  #     args:
  #       POETRY_GROUPS: "kafka"
  #   container_name: kafka-mcp-server
  #   environment:
  #     - MCP_HOST=0.0.0.0
  #     - MCP_PORT=8000
  #     - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
  #     - PYTHONPATH=/app
  #   volumes:
  #     - ./backend/src/mcp_servers:/app/mcp_servers
  #   working_dir: /app/mcp_servers
  #   command: python kafka.py
  #   networks:
  #     - mcp-network
  #   depends_on:
  #     - kafka

  # kafka:
  #   image: confluentinc/cp-kafka:7.4.0
  #   container_name: kafka-mcp
  #   ports:
  #     - "9092:9092"
  #     - "9101:9101"
  #   environment:
  #     KAFKA_NODE_ID: 1
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://0.0.0.0:29093
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
  #     KAFKA_PROCESS_ROLES: 'broker,controller'
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_JMX_PORT: 9101
  #     KAFKA_JMX_HOSTNAME: localhost
  #     KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
  #     KAFKA_DELETE_TOPIC_ENABLE: 'true'
  #     KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
  #   volumes:
  #     - kafka-data:/tmp/kraft-combined-logs
  #   networks:
  #     - mcp-network

  # mongodb:
  #   image: mongo:7.0
  #   container_name: mongodb-mcp
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
  #     MONGO_INITDB_DATABASE: ${MONGO_DATABASE:-lingua}
  #   ports:
  #     - "27017:27017"
  #   volumes:
  #     - mongodb-data:/data/db
  #     - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  #   networks:
  #     - mcp-network

  # postgres:
  #   image: postgres:17
  #   container_name: postgres-mcp
  #   environment:
  #     POSTGRES_DB: ${POSTGRES_DB:-postgres}
  #     POSTGRES_USER: ${POSTGRES_USER:-postgres}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
  #   ports:
  #     - "5432:5432"
  #   volumes:
  #     - mongodb-data:/data/db
  #     - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
  #   networks:
  #     - mcp-network

networks:
  ${DOCKER_NETWORK}:
    driver: bridge

# volumes:
#   kafka-data:
#   mongodb-data:
#   postgres-data:

