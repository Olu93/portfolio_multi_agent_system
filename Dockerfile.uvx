# syntax=docker/dockerfile:1.7-labs

########## Builder ##########
FROM python:3.12-alpine AS builder
ARG GIT_URL
ARG GIT_REF=main

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV UV_LINK_MODE=copy

RUN apk add --no-cache build-base python3-dev linux-headers libffi-dev openssl-dev curl git gfortran openblas-dev libstdc++

WORKDIR /app
RUN test -n "$GIT_URL" || (echo "Set --build-arg GIT_URL=<repo>" && exit 1)
RUN git clone --depth=1 --branch "$GIT_REF" "$GIT_URL" /app || (echo "If using a SHA, set GIT_REF and remove --branch"; exit 1)

RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:${PATH}"
ENV UV_PYTHON=/usr/local/bin/python3

RUN rm -rf .venv && uv lock --python "$UV_PYTHON" && uv sync --python "$UV_PYTHON" --no-dev

########## Runtime ##########
FROM python:3.12-alpine AS runtime

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ENV UV_PYTHON=/app/.venv/bin/python
ENV PATH="/app/.venv/bin:/usr/local/bin:$PATH"

WORKDIR /app
RUN apk add --no-cache libstdc++ libffi openssl curl git openblas

COPY --from=builder /app /app
COPY --from=builder /root/.local/bin/uv /usr/local/bin/uv
COPY --from=builder /root/.local/bin/uvx /usr/local/bin/uvx

EXPOSE 8000
CMD ["uv", "run", "python", "-m", "yfinance_mcp.server"]
